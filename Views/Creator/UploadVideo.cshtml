@model BeeTube.Models.VideoUploadModel

@{
    ViewBag.Title = "Upload Video";
}

<style>
    /* site.css */

    .form-horizontal {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .control-label {
        font-weight: bold;
        margin-bottom: 10px;
        display: block;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
        font-family: Arial, sans-serif;
        box-sizing: border-box;
    }

    .text-danger {
        color: red;
    }

    .btn-default {
        background-color: #e62117;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        font-size: 14px;
        cursor: pointer;
    }

        .btn-default:hover {
            background-color: #b9150f;
        }

    .back-link {
        display: inline-block;
        margin-top: 20px;
    }

        .back-link a {
            color: #e62117;
        }

            .back-link a:hover {
                text-decoration: none;
            }

    .validation-summary-errors {
        background-color: #f2dede;
        color: #a94442;
        padding: 10px;
        margin-bottom: 20px;
        border: 1px solid #ebccd1;
        border-radius: 4px;
    }

        .validation-summary-errors ul {
            margin: 0;
            padding: 0;
            list-style-type: none;
        }

        .validation-summary-errors li {
            margin-bottom: 5px;
        }

    .video-preview {
        height: 300px;
        margin-top: 10px;
    }

    #video-preview {
        width: 100%;
    }


    /* Style for thumbnail preview */
    #thumbnail-preview {
        width: 100%;
        /* max-width: 100%;
        max-height: 200px;*/
        margin-top: 10px;
        margin-bottom: 10px;
        object-fit: contain;
    }

    /* Style for hidden elements */
    .hidden {
        display: none;
    }
    /* Adjust the width of the title field */
    #Title {
        width: 100%;
        max-width: none;
    }

    /* Adjust the width of the description field */
    #Description {
        width: 100%;
        max-width: none;
    }

    textarea {
        max-width: none;
    }
</style>


<div>
    @Html.ActionLink("Go to Dashboard", "Dashboard", "Creator", new { @class = "btn btn-outline-info" })
</div>
<br />


@using (Html.BeginForm("UploadVideo", "Creator", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Video Upload</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                </div>
            </div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.UploadDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UploadDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UploadDate, "", new { @class = "text-danger" })
                </div>
            </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.VideoFile, "Video File (mp4)", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.VideoFile, new { type = "file" })
                @Html.ValidationMessageFor(model => model.VideoFile, "", new { @class = "text-danger" })
                <video id="video-preview" class="video-preview hidden" controls></video>
                <div class="video-duration">
                    @Html.LabelFor(model => model.Duration, "Video Duration:", htmlAttributes: new { @class = "control-label" })
                    @Html.DisplayFor(model => model.Duration)
                    @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { type = "time", @class = "form-control", id = "VideoDuration", @readonly = "readonly" } })
                    @*<p id="VideoDuration"></p>*@
                </div>
            </div>
        </div>
        @*<div class="form-group">
                @Html.LabelFor(model => model.FilePath, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FilePath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FilePath, "", new { @class = "text-danger" })
                </div>
            </div>*@
        @*<div class="form-group">
                @Html.LabelFor(model => model.CategoryId, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.CategoryId, ViewBag.Categories as SelectList, "-- Select Category --", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.CategoryID, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CategoryID, ViewBag.Categories as SelectList, "-- Select Category --", new { @class = "form-control" })
                @*@Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })

            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.ThumbnailUrl, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ThumbnailUrl, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ThumbnailUrl, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.ThumbnailFile, "Thumbnail File (jpg)", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ThumbnailFile, new { type = "file" })
                @Html.ValidationMessageFor(model => model.ThumbnailFile, "", new { @class = "text-danger" })
                <!-- Thumbnail preview -->
                <img id="thumbnail-preview" src="#" alt="Thumbnail Preview" class="hidden" />

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Upload" class="btn btn-outline-danger" />
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    $(document).ready(function () {
        // Function to handle file input change event
        $("#VideoFile").on("change", function (e) {
            var file = e.target.files[0];
            var video = document.getElementById("video-preview");

            // Check if the file is a video
            if (file.type.match("video.*")) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    video.src = e.target.result;
                    video.classList.remove("hidden");



                };

                reader.readAsDataURL(file);

                video.addEventListener('loadedmetadata', function () {
                    // Update the video duration
                    console.log(video.duration);

                    //
                    var durationInSeconds = video.duration;
                    var durationField = document.getElementById("VideoDuration");

                    // Convert duration to the desired format (e.g., hh:mm:ss)
                    var hours = Math.floor(durationInSeconds / 3600);
                    var minutes = Math.floor((durationInSeconds % 3600) / 60);
                    var seconds = Math.floor(durationInSeconds % 60);
                    var milliseconds = Math.floor((durationInSeconds - Math.floor(durationInSeconds)) * 1000);


                    var durationFormatted = hours.toString().padStart(2, "0") + ":" + minutes.toString().padStart(2, "0") + ":" + seconds.toString().padStart(2, "0") + "." + milliseconds.toString().padStart(3, "0");
                    console.log(durationFormatted);
                    // Set the value in the duration input field
                    durationField.value = durationFormatted;
                });

            } else {
                video.src = "";
                video.classList.add("hidden");
            }


        });



        // Function to handle file input change event for thumbnail preview
        $("#ThumbnailFile").on("change", function (e) {
            var file = e.target.files[0];
            var thumbnail = document.getElementById("thumbnail-preview");

            // Check if the file is an image
            if (file.type.match("image.*")) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    thumbnail.src = e.target.result;
                    thumbnail.classList.remove("hidden");
                };

                reader.readAsDataURL(file);
            } else {
                thumbnail.src = "";
                thumbnail.classList.add("hidden");
            }
        });
    });

</script>